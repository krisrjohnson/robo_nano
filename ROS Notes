
>> cd /home/workspace/catkin_ws/
>> source devel/setup.bash  // use source so the bash script will affect this session

// ROS setup of catkin workspace and simple_arm package
>> mkdir -p /home/workspace/catkin_ws/src/
>> cd /home/workspace/catkin_ws/src/
>> git clone -b first_interaction https://github.com/udacity/RoboND-simple_arm/ simple_arm

>> ros::Publisher pub1 = n.advertise<message_type>("/topic_name", queue_size);
ros::Publisher is the ROS publisher class
	method: publish() in this class
	NodeHandle is n
	advertise() informs OS you want to publish under topic_name
	message_type can be std_msgs::String
	queue_size is # of msgs stored in queue, if msgs stored > queue_size, oldest msgs dropped
>> pub1.publish(msg)

// adding a new node to an existing package, simple_arm
>> cd /home/workspace/catkin_ws/src/simple_arm/
>> mkdir src
>> touch src/simple_mover.cpp  // create C++ script within the package

#include "ros/ros.h"  //official ros header file; tools for nodes, opics, services, params, etc
#include "std_msgs/Float64.h"  // use Float64 msgs to pub to the position topic

ros::init(argc, argv, "arm_mover");  // init both argc and argv


// updating the CMakeLists.txt file so simple_mover is useable:
// at bottom
include_directories(include ${catkin_INCLUDE_DIRS})

add_executable(simple_mover src/simple_mover.cpp)
target_link_libraries(simple_mover ${catkin_LIBRARIES})
add_dependencies(simple_mover simple_arm_generate_messages_cpp)

// generalized version:
add_executable(node_name sourcecode_directory)
target_link_libraries(node_name ${catkin_LIBRARIES})
add_dependencies(node_name package_name_generate_messages_cpp)

// run and build simple mover
	>> /home/workspace/catkin_ws/# catkin_make  //compile the new node
	>> /home/workspace/catkin_ws/# source devel/setup.bash  //source so that the var's affect this session
	>> roslaunch simple_arm robot_spawn.launch
	// launch new terminal tab
	>> /home/workspace/catkin_ws/# source devel/setup.bash
	>> /home/workspace/catkin_ws/# rosrun simple_arm simple_mover


ROS Services, lessons 7,8: http://wiki.ros.org/roscpp/Overview/Services
__________________________________________________________
ros::ServiceServer service = n.advertiseService(`service_name`, handler);  //creating a service server
	// ServiceServer class name comes from filename.srv where service exists
	// srv dir is under packages root
>> rosservice call service_name "request"  //services can be invoked from cmdline
ros::ServiceClient client = n.serviceClient<package_name::service_file_name>("service_name");  //or within a node
// http://wiki.ros.org/roscpp/Overview/Services

// Service definitions always contain two sections, separated by a ‘---’ line. The first section is the definition of the request message. The second section contains the service response
// in order for catkin to generate the C++ libraries which allow you to utilize messages in your code you must modify simple_arm’s CMakeLists.txt

// package.xml for build- and run-time dependencies: aka that message_generation and message_runtime exist
// http://wiki.ros.org/catkin/package.xml

// to double check ROS can see the newly added service (in this case, GoToPosition):
$ cd /home/workspace/catkin_ws/
$ source devel/setup.bash
$ rossrv show GoToPosition

service steps:
1. create srv dir in package root folder
2. create a service.srv file containing request types, '---', and then response types
3. CMakeLists.txt add the dependencies
4. build and run dependencies in package.xml
5. check ROS can see the new service file

